#!@MKR_BASE_SHELL@

secure_network="@MKR_SECURE_NETWORK@"

mount /proc
dev=`sed 's/^.* console=\([^, ]*\).*$/\1/;t;s/.*/tty1/' /proc/cmdline`

# Make dev a tmpfs directory
if ! grep -q devtmpfs /proc/mounts; then
    if grep -q devtmpfs /proc/filesystems; then
	mount -t devtmpfs none /dev
	exec < /dev/$dev > /dev/$dev 2> /dev/$dev
    else
	mount -t tmpfs none /dev
    fi
else
    exec < /dev/$dev > /dev/$dev 2> /dev/$dev
fi


# Create /dev/shm and /dev/pts for devtmpfs
mkdir -p /dev/shm /dev/pts
mount -a -O no_netdev

if test ! -e /etc/ld.so.cache; then
    echo -n 'Running ldconfig...'
    ldconfig
    echo done
fi

echo /sbin/mkrootfs_hotplug > /proc/sys/kernel/hotplug
mknod /dev/null c 1 3
mknod /dev/zero c 1 5
mdev -s
exec < /dev/$dev > /dev/$dev 2> /dev/$dev

# Update clock
if grep -q "root=/dev/nfs" /proc/cmdline; then
    rootserver=`dmesg | sed 's/^.*rootserver=\([^,]*\).*$/\1/;t;d'`
    if test -n "$rootserver"; then
	/usr/sbin/rdate -s "$rootserver"
    fi
fi

# Create root of run state information
mkdir -p /var/run

# Start log daemons
mkdir -p /var/log
syslogd -S -D -L
klogd

# Load modules
if test -e /usr/bin/keymap-chooser.sh; then
    modprobe xeno_autotune > /dev/null 2>&1 || :
    modprobe xhci_hcd > /dev/null 2>&1
    modprobe ehci_hcd > /dev/null 2>&1
    find /sys -name modalias | while read f; do
	modprobe `cat $f` > /dev/null 2>&1 || :
    done
fi

# Install default keymap if available
chooser_pid=
if test -e /etc/defkeymap.bin.xz; then
    echo Loading default keymap
    loadkeys defkeymap
elif test -e /usr/bin/keymap-chooser.sh; then
    case "$dev" in
    tty[0-9]*)export TERM=linux;;
    esac

# Become silent
    exec > /dev/null 2> /dev/null < /dev/null
    echo 3 4 1 7 > /proc/sys/kernel/printk

    /usr/bin/keymap-chooser.sh < /dev/$dev > /dev/$dev 2> /dev/$dev &
    chooser_pid=$!
fi

# Start RAID
if test -e /sbin/mdadm; then
    /sbin/mdadm --assemble --scan
fi

# Start network
if ! ifconfig lo | grep -s UP > /dev/null 2>&1; then
    ifconfig lo 127.0.0.1 up
    ifconfig eth0 up 0.0.0.0
    udhcpc -a -b -R -S
fi

# Start telnet
if ! $secure_network; then
    telnetd
fi

# Start ssh
if test -e /usr/sbin/sshd; then
    ECDSA_KEY=/etc/ssh_host_ecdsa_key

    if test ! -e /var/empty; then
	mkdir /var/empty
    fi

    if test ! -e $ECDSA_KEY; then
	rm -f $ECDSA_KEY.tmp
	ssh-keygen -N "" -t ecdsa -f $ECDSA_KEY.tmp
	mv $ECDSA_KEY.tmp.pub $ECDSA_KEY.pub
	mv $ECDSA_KEY.tmp $ECDSA_KEY
	sync
    fi
    echo OpenSSH server public key: > /etc/motd
    ssh-keygen -y -f /etc/ssh_host_ecdsa_key >> /etc/motd

    if ! $secure_network; then
	/usr/sbin/sshd -o PermitRootLogin=yes -o PermitEmptyPasswords=yes
    else
	cat >> /etc/motd <<EOF
*******************************************************
*                                                     *
* root password must not be empty to allow ssh access *
*                                                     *
*******************************************************
EOF
	/usr/sbin/sshd -o PermitRootLogin=yes
    fi
elif test -e /usr/sbin/dropbear; then
    ECDSA_KEY=/etc/dropbear/dropbear_ecdsa_host_key

    if test ! -e $ECDSA_KEY; then
	mkdir -p /etc/dropbear
	/usr/bin/dropbearkey -t ecdsa -f $ECDSA_KEY.tmp
	mv $ECDSA_KEY.tmp $ECDSA_KEY
	sync
    fi
    /usr/bin/dropbearkey -y -f $ECDSA_KEY > /etc/motd
    if ! $secure_network; then
	dropbear -B -R
    else
	cat >> /etc/motd <<EOF
*************************************************
*                                               *
* root password must be set to allow ssh access *
*                                               *
*************************************************
EOF
	dropbear -R
    fi
fi

# Start rpcbind
if test -e /usr/bin/rpcbind; then
    /usr/bin/rpcbind
fi

# Mount file systems over network devices
mount -a -O _netdev

# Install ltp (old versions)
if test -e /ltp && test ! -e /ltp/.installed -o ! -e /ltp/testcases/bin/hackbench; then
    echo 'Installing LTP'
    dir=`pwd`
    cd /ltp
    make install && : > /ltp/.installed
    cd $dir
fi

if test -e /lib/modules/`uname -r`/modules.dep.bb; then
    rm /lib/modules/`uname -r`/modules.dep.bb
fi

chown root:0 /bin/ping
chmod u+sx /bin/ping

if test -e /dev/rtdm/autotune; then
    /usr/sbin/autotune --verbose --background
fi

if test -n "$chooser_pid"; then
    wait "$chooser_pid"
fi
