# ==========================================================================
# Building
# ==========================================================================

src := $(obj)

PHONY := _build
_build:

confcheck-y =

# Read auto.conf if it exists, otherwise ignore
-include $(O)/include/config/auto.conf

ifneq ($(O),linux/)
ifneq ($(filter $(MAKECMDGOALS),confcheck),)
-include $(O)/linux/.config
endif
endif

# Toolchain arguments
override ARCH := $(MKR_ARCH)
override ARCH_FLAGS := $(MKR_ARCH_FLAGS)
override CC := $(MKR_CC)
override CXX := $(MKR_CXX)
override KCC := $(MKR_KCC)
override cflags-y := $(MKR_CFLAGS)
override ldflags-y := $(MKR_LDFLAGS)

# Unexport variables exported by top makefile
unexport srctree objtree VPATH MKR_BUILD_SRC
unexport quiet Q KBUILD_VERBOSE
unexport HOSTCC HOSTCXX HOSTCFLAGS HOSTCXXFLAGS
unexport AWK
unexport RCS_TAR_IGNORE KBUILD_EXTMOD
unexport MKR_CONFIG O obj

# Avoid leaking variables (the one passed on command-line) to sub-makes
MAKEOVERRIDES=

MKR_STAGING := $(O)/staging
MKR_ROOTFS := $(O)/rootfs

MAKE_UNI := $(MAKE) -j 1

# The filename Kbuild has precedence over Makefile
mkr-pkgdir := $(if $(filter /%,$(src)),$(src),$(srctree)/$(src))
mkr-pkgmk := $(if $(wildcard $(mkr-pkgdir)/Kbuild),$(mkr-pkgdir)/Kbuild,$(mkr-pkgdir)/Makefile)

ifeq ($(mkr-pkgmk),)
$(error No Makefile or Kbuild for package $(obj))
endif

.mkr.makefile.deps: $(mkr-pkgmk)
	$(Q)$(AWK) -f $(srctree)/scripts/makefile-deps.awk $< > $@ || rm -f $@

-include .mkr.makefile.deps

# Define confcheck macros
not = $(if $(strip $(1)),,y)

confcheck-if = $(1) > /dev/null && { echo $(2); success=false; };

confcheck-ifnot = $(1) > /dev/null || { echo $(2); success=false; };

confcheck-tool = type $(1) > /dev/null 2>&1 || { \
	echo Error: Command $(1) not found, install it or see $(2); \
	success=false; };
confcheck-not-empty = test x$($(strip $(1))) != x > /dev/null 2>&1 || { \
	echo Error: Variable $(1) can not be empty; success=false; };
confcheck-exists = test -e $(1) > /dev/null 2>&1 || { \
	echo Error: File $(1) not found, see $(2); success=false; };

# Macro for recursing
mkr-recurse = $(Q)failcom='exit 1'; success=:; \
	for f in x $$MAKEFLAGS; do \
		case $$f in \
			*=* | --[!k]*);; \
			*k*) failcom='success=false';; \
		esac; \
	done; \
	for target in $(1); do \
		echo $(2) $$target; \
		$(2) $$target || eval $$failcom; \
	done; \
	$$success

mkr-cross := $(shell expr $(CC) : '\(.*\)gcc')
mkr-kcross := $(shell expr $(KCC) : '\(.*\)gcc')

mkr-configure-args-y = \
	--host="$(MKR_CONFIGURE_HOST)" \
	--prefix=/usr \
	CC="$(CC)" CXX="$(CXX)" LD="$(mkr-cross)ld" AR="$(mkr-cross)ar" \
	CFLAGS="$(cflags-y)" LDFLAGS="$(ldflags-y)"

include $(mkr-pkgmk)

ifneq ($(MKR_BUILD_SRC),)
# Create output directory if not already present
_dummy := $(shell [ -d $(O)/$(obj) ] || mkdir -p $(O)/$(obj))

# Create directories for object files if directory does not exist
# Needed when obj-y := dir/file.o syntax is used
_dummy := $(foreach d,$(obj-dirs), $(shell [ -d $(O)/$(d) ] || mkdir -p $(O)/$(d)))
endif

ifndef obj
$(warning kbuild: Makefile.pkgbuild is included improperly)
endif

# Default rules
.PHONY: confcheck
confcheck:

.PHONY: default-confcheck
default-confcheck:
	$(Q)success=:;$(confcheck-y) $$success

.PHONY: staging
staging:

# Rules for building autoconf packages
config.status: $(mkr-deps)
	rm -Rf * || :
	$(mkr-srcdir)/configure $(mkr-configure-args-y)

.PHONY: default-autotools-staging
default-autotools-staging: config.status
	$(MAKE) DESTDIR=$(MKR_STAGING) install
